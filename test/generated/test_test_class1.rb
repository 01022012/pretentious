# This file was automatically generated by the pretentious gem
require 'minitest_helper'
require 'minitest/autorun'

class TestClass1Test < Minitest::Test
end

class TestClass1Scenario1 < TestClass1Test
  def setup
    @fixture = TestClass1.new('test')
  end

  def test_current_expectation
    # TestClass1#message  should return 'test'
    assert_equal 'test', @fixture.message
  end
end

class TestClass1Scenario2 < TestClass1Test
  def setup
    @another_object = TestClass1.new('test')
    @message = { hello: 'world', test: @another_object, arr_1: [1, 2, 3, 4, 5, @another_object], sub_hash: { yes: true, obj: @another_object } }
    @fixture = TestClass1.new(@message)
  end

  def test_current_expectation
    a = proc { |message|
      @message
    }

    filewriter = nil
    b = proc { 
      # Variable return values ... can't figure out what goes in here...
    }


    # TestClass1#print_message  should return nil
    assert_nil @fixture.print_message

    # TestClass1#set_block  should return a
    assert_equal a, @fixture.set_block( &a)

    # TestClass1#call_block  should return @message
    assert_equal @message, @fixture.call_block( &b)

    # TestClass1#something_is_wrong  should return e
    assert_raises(StandardError) { @fixture.something_is_wrong }

    # TestClass1#just_returns_true  should return true
    assert @fixture.just_returns_true
  end
end

class TestClass1Scenario3 < TestClass1Test
  def setup
    @fixture = TestClass1.new('Hello')
  end

  def test_current_expectation
    another_object = TestClass1.new('test')

    # TestClass1#return_self when passed message = #<TestClass1:0x0000000214e978> should return another_object
    assert_equal another_object, @fixture.return_self(another_object)
  end
end

class TestClass1Scenario4 < TestClass1Test
  def setup
    @message = TestClass1.new('test')
    @fixture = TestClass1.new(@message)
  end

  def test_current_expectation
    # TestClass1#message  should return @message
    assert_equal @message, @fixture.message
  end
end