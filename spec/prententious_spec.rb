require 'spec_helper'

RSpec.describe Pretentious::Generator do

  context 'Pretentious::Generator' do

    before do
      @fixture = Pretentious::Generator.new
      Pretentious::Generator.test_generator = Pretentious::RspecGenerator
    end

    it "classes should have a stub class section" do
      Fibonacci._stub(String)
      expect(Fibonacci._get_mock_classes).to eq([String])
    end

    it "tracks object calls" do
      klass = Fibonacci

      result = Pretentious::Generator.generate_for(Fibonacci) do
        expect(klass == Fibonacci).to_not be
        Fibonacci.say_hello
      end
      #should clean up after block
      expect(klass == Fibonacci).to be

      #should still work
      fib = Fibonacci.new
      expect(fib.fib(6)).to eq(8)

      expect(result).to eq({
        Fibonacci =>{output: "#This file was automatically generated by the pretentious gem\nrequire 'spec_helper'\n\nRSpec.describe Fibonacci do\n\n    it 'should pass current expectations' do\n      # Fibonacci::say_hello  should return hello\n      expect( Fibonacci.say_hello ).to eq(\"hello\")\n\n    end\nend\n",
                     generator: Pretentious::RspecGenerator}})
    end
  end

  context "unobstrusive generator" do
    it "declare watched classes beforehand and capture when certain methods are invoked" do
      #declare intention
      Pretentious.on(TestClass5).method_called(:test_method).spec_for(Fibonacci) do |results|
        expect(results[Fibonacci][:output]).to eq("#This file was automatically generated by the pretentious gem\nrequire 'spec_helper'\n\nRSpec.describe Fibonacci do\n\n  context 'Scenario 1' do\n    before do\n      @fixture = Fibonacci.new\n    end\n\n    it 'should pass current expectations' do\n\n      # Fibonacci#fib when passed n = 5 should return 5\n      expect( @fixture.fib(5) ).to eq(5)\n\n    end\n  end\n\nend\n")
      end

      expect(Pretentious::Generator).to receive(:generate_for).with(Fibonacci).and_call_original
      #execute code
      class_that_uses_fib = TestClass5.new
      result = class_that_uses_fib.test_method
      expect(result).to eq(5)
    end

    it "outputs to a file when no block is given" do
      Pretentious.on(TestClass5).method_called(:test_method).spec_for(Fibonacci)

      expect(Pretentious::Trigger).to receive(:output_file)

      class_that_uses_fib = TestClass5.new
      result = class_that_uses_fib.test_method
      expect(result).to eq(5)
    end
  end
end
