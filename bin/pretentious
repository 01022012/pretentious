#!/usr/bin/env ruby

require 'pretentious'
require 'optparse'
require 'ripper'
require 'readline'
require 'json'
require 'fileutils'
require 'yaml'

def eval_example(filename)
  example_body = ''
  index = 0
  File.open(filename, "r") do |f|
    f.each_line do |line|
      example_body << "#{line}\n"
    end
  end

  eval(example_body, binding, filename, 1)
end

def write_output(output_folder, output_subfolder, last_results = nil)
  # collect results and write them
  puts "writing tests to #{output_folder}"
  filewriter = Pretentious::FileWriter.new(output_folder: output_folder,
                                           spec_output_folder: output_subfolder)
  filewriter.write_results(last_results || Pretentious.last_results)
end

def process_file(filename, output_folder, output_subfolder, last_results = nil)
  eval_example(filename)
  write_output(output_folder, output_subfolder, last_results)
end

def generate_specs(examples, generators, output_folder, output_subfolder)
  Pretentious.watch {
    examples.each do |f|
      puts "executing target #{f}"
      eval_example(f)
    end
  }

  generator_classes = generators.collect do |g|
    case g
      when 'rspec'
        Pretentious::RspecGenerator
      when 'minitest'
        Pretentious::MinitestGenerator
    end
  end

  per_spec = {}
  generator_classes.each do |generator_class|
    puts "generating #{generator_class.to_sym} tests"
    per_spec[generator_class.to_sym] = Pretentious::LazyTrigger.generate_for_class(generator_class)
  end
  per_spec = Pretentious.deep_merge(per_spec, Pretentious.last_results)
  write_output(output_folder, output_subfolder, per_spec)
end

output_folder = nil
output_subfolder = nil
targets = nil
generators = "rspec"
help = false

# pretentious example.rb -t rspec -o rspec/
options = OptionParser.new do |o|
  o.banner =
    "Usage: pretentious FILENAME [options] # Generates tests using the specified example file\n"
  o.separator ''
  o.separator "options:"
  o.on('-h', '--help', 'show this help module') { help = true }
  o.on('-t=classnames', '--target=classnames',
       'target class to generate tests for') { |b| targets = b}
  o.on('-g=GENERATORS', '--generators=GENERATORS', 'comma separated list of generators to use valid values rspec, minitest (defaults rspec)') { |b| generators = b}
  o.on('-n=namespace', '--namespace=NAMESPACE',
       'sub folder to place the generated files in (defaults to generated)') { |b| output_subfolder = b }
  o.on('-o=OUTPUT_DIR', '--output-dir=OUTPUT_DIR',
       'folder to place the files in -- defaults to spec (RSpec) or test (minitest)') { |b| output_folder = b}
  o.parse!
end

filename = ARGV[0]

if help
  puts options
  exit(1)
end
if filename.nil?
  if File.exists?('pretentious.yml')
    targets_file = YAML.load_file('pretentious.yml')
    targets_file['targets'].each do |target|
      puts "generate for #{target['class']}"
      if target['class'].start_with?('$')
        target['class'][0] = ''
        Pretentious::LazyTrigger.new(eval(target['class']), {})
      else
        Pretentious::LazyTrigger.new(target['class'], {})
      end
    end

    examples = targets_file['examples']
    generators = targets_file['generators']

    generate_specs examples, generators, output_folder, output_subfolder
  else
    puts 'a target or an example file is required.'
    puts options
    exit(1)
  end
else
  if !targets.nil?
    targets.split(',').each do |target|
      if target.start_with?('$')
        target[0] = ''
        Pretentious::LazyTrigger.new(eval(target), {})
      else
        puts target
        Pretentious::LazyTrigger.new(target, {})
      end
    end

    generate_specs filename.split(','), generators.split(','), output_folder, output_subfolder
  else
    process_file(filename, output_folder, output_subfolder)
  end
end
